import os
import urllib.request

from src.main.python.launcher.launcher import Launcher, ManualPage, Command, Option


class TestLauncher(Launcher):
    """
    A launcher to execute tests on the model generated by with the training module.
    """

    CLASSIFY_COMMAND = 'classify'
    ROC_CURVE_COMMAND = 'roc'

    TENSORFLOW_SERVING_OPTION = '-tfs'

    def __init__(self, args: list):
        super().__init__(args)

    def get_manual_page(self):
        return TestManualPage()

    def start_process(self):
        if self.args[0] == self.CLASSIFY_COMMAND:
            self.classify_document()
        elif self.args[0] == self.ROC_CURVE_COMMAND:
            self.build_roc_curve()
        else:
            print('The command ' + self.args[0] + ' is not defined as a Demos test command.')
            print('Please see manual page running "demos test -h"')

    def classify_document(self):
        from src.main.python.process.pdf_converter.pdf_converter import PdfConverter
        url = list(filter(lambda arg: arg.__contains__('://'), self.args))[0]
        pdf_content = urllib.request.urlopen(url).read()
        text_content = PdfConverter(timeout=300).convert(pdf_content)
        classifier = self._get_classifier()
        classification = classifier.classify(text_content)
        print(classification.class_prediction)
        if classification.isOfficialCouncilReport():
            print('Yep : the PDF at ' + url + ' has been classified as an official city council report')
        else:
            print('Nope : the PDF at ' + url + ' has not been classified as an official city council report')

    def _get_classifier(self):
        if self.args.__contains__(TestLauncher.TENSORFLOW_SERVING_OPTION):
            from src.main.python.process.archiving.rest_client_pdf_classifier import RestClientPdfClassifier
            return RestClientPdfClassifier()
        else:
            from src.main.python.process.archiving.local_pdf_classifier import LocalPdfClassifier
            return LocalPdfClassifier()

    def build_roc_curve(self):
        from src.main.python.process.training.classification_model.roc_curve_producer import RocCurveBuilder
        roc_curve_builder = RocCurveBuilder()
        roc_curve_builder.build_roc_curve()


class TestManualPage(ManualPage):

    def get_usage(self):
        return 'Usage : demos test [command]'

    def get_title(self):
        return 'Welcome in Demos test manual page !'

    def get_description(self):
        return 'Demos test module allow the user to test the classification model built with the training module.'

    def get_commands(self):
        return [
            Command(TestLauncher.CLASSIFY_COMMAND,
                    'Runs the automatic classification process against a PDF documents pointed by the url given as an argument ' + os.linesep +
                    'with the following syntax :' + os.linesep +
                    '\'demos test classify http://an/url/to/a/file.pdf\''),
            Command(TestLauncher.ROC_CURVE_COMMAND,
                    'Draws the roc curve of the model to evaluate model\'s efficiency.' + os.linesep +
                    '(see https://en.wikipedia.org/wiki/Receiver_operating_characteristic)')
        ]

    def get_options(self):
        return [
            Option(TestLauncher.TENSORFLOW_SERVING_OPTION,
                   'Runs the classification process using tensorflow serving service.' + os.linesep +
                   'This option has an effects only with the ' + TestLauncher.CLASSIFY_COMMAND + ' command.'+ os.linesep +
                   'To use this option, the prediction model has to be deployed into a tensorflow serving service.' + os.linesep +
                   'And the parameters "tensorflow_serving_host" and "tensorflow_serving_port" must be set in the confi file.')
        ]
